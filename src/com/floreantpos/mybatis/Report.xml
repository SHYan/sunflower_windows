<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Report">
	 
	<!-- Yearly Sales Report -->
	<select id="getYearly_Sales" parameterType="Map" resultType="com.floreantpos.model.mybatis.YearlySalesReportM">
        SELECT 
        SUM(CASE WHEN EXTRACT(MONTH FROM closing_date) =  1 THEN total_price ELSE 0 END) AS janSale,
        SUM(CASE WHEN EXTRACT(MONTH FROM closing_date) =  2 THEN total_price ELSE 0 END) AS febSale,
        SUM(CASE WHEN EXTRACT(MONTH FROM closing_date) =  3 THEN total_price ELSE 0 END) AS marSale,
        SUM(CASE WHEN EXTRACT(MONTH FROM closing_date) =  4 THEN total_price ELSE 0 END) AS aprSale,
        SUM(CASE WHEN EXTRACT(MONTH FROM closing_date) =  5 THEN total_price ELSE 0 END) AS maySale,
        SUM(CASE WHEN EXTRACT(MONTH FROM closing_date) =  6 THEN total_price ELSE 0 END) AS junSale,
        SUM(CASE WHEN EXTRACT(MONTH FROM closing_date) =  7 THEN total_price ELSE 0 END) AS julSale,
        SUM(CASE WHEN EXTRACT(MONTH FROM closing_date) =  8 THEN total_price ELSE 0 END) AS augSale,
        SUM(CASE WHEN EXTRACT(MONTH FROM closing_date) =  9 THEN total_price ELSE 0 END) AS sepSale,
        SUM(CASE WHEN EXTRACT(MONTH FROM closing_date) = 10 THEN total_price ELSE 0 END) AS octSale,
        SUM(CASE WHEN EXTRACT(MONTH FROM closing_date) = 11 THEN total_price ELSE 0 END) AS novSale,
        SUM(CASE WHEN EXTRACT(MONTH FROM closing_date) = 12 THEN total_price ELSE 0 END) AS decSale
        FROM ticket AS t
        WHERE closing_date BETWEEN #{startDate} AND #{endDate} AND t.voided='false'
        <if test="NeedPaid != null"> AND t.paid=#{NeedPaid} </if>
    </select>
    
    <select id="getDaily_Sales" parameterType="HashMap" resultType="com.floreantpos.model.mybatis.DailySalesReportM">
		SELECT date(t.closing_date) AS factdate, COUNT(*) AS order_count,
		SUM(t.number_of_guests) AS customer_subtotal, SUM(t.sub_total) AS item_subtotal, SUM(t.item_qty) AS qty_subtotal, SUM(t.item_count) AS count_subtotal,
		SUM(t.due_amount) AS due_subtotal, SUM(t.total_tax) AS tax_subtotal, SUM(t.total_discount) AS discount_subtotal,
		SUM(t.service_charge) AS service_charge_subtotal, SUM(t.paid_amount) AS payment_subtotal, SUM(t.total_price) AS sale
		FROM ticket AS t
	    WHERE t.closing_date BETWEEN #{startDate} AND #{endDate} AND t.voided='false'
	    <if test="NeedPaid != null"> AND t.paid=#{NeedPaid} </if>
	    GROUP BY factdate
      	ORDER BY factdate ASC
	</select>
	
	<select id="getHourly_Sales" parameterType="HashMap" resultType="com.floreantpos.model.mybatis.HourlySalesReportM">
		SELECT t.creation_hour AS factdate, COUNT(*) AS order_count,
		SUM(t.number_of_guests) AS customer_subtotal, SUM(t.sub_total) AS item_subtotal, SUM(t.item_qty) AS qty_subtotal, SUM(t.item_count) AS count_subtotal,
		SUM(t.due_amount) AS due_subtotal, SUM(t.total_tax) AS tax_subtotal, SUM(t.total_discount) AS discount_subtotal,
		SUM(t.service_charge) AS service_charge_subtotal, SUM(t.paid_amount) AS payment_subtotal, SUM(t.total_price) AS sale
		FROM ticket AS t
	    WHERE t.closing_date BETWEEN #{startDate} AND #{endDate} AND t.voided='false'
	    <if test="NeedPaid != null"> AND t.paid=#{NeedPaid} </if>
	    GROUP BY creation_hour
      	ORDER BY creation_hour ASC
	</select>
	
	<select id="getOrder_Sales_Payment" parameterType="HashMap" resultType="com.floreantpos.model.mybatis.PaymentReportM">
		SELECT date_trunc('second', t.closing_date) AS factdate, t.id, t.sub_total AS item_subtotal, t.total_tax AS tax_subtotal,
			t.service_charge AS service_charge_subtotal, t.total_discount AS discount_subtotal,
			t.total_price AS sale, t.due_amount AS due_subtotal,
			CASE WHEN trans.payment_type = 'CASH' THEN 'CASH' 
				 WHEN trans.payment_type = 'REFUND' THEN 'REFUND' 
				 ELSE  trans.custom_payment_name END AS paymentName, 
			trans.custom_payment_ref AS paymentRef
			FROM ticket AS t LEFT JOIN transactions AS trans ON (t.id=trans.ticket_id)
			WHERE t.closing_date BETWEEN #{startDate} AND #{endDate} AND t.voided='false' 
			<if test="paymentName != null"> AND (trans.custom_payment_name=#{paymentName} OR trans.payment_type=#{paymentName} OR trans.custom_payment_ref=#{paymentName})</if>
			ORDER BY t.id ASC
	</select>
	<select id="getDaily_Sales_Payment_summary_d" parameterType="HashMap" resultType="com.floreantpos.model.mybatis.PaymentReportM">
		SELECT date(t.closing_date) AS factdate, count(t.id) AS qty_subtotal,
			CASE WHEN trans.payment_type = 'CASH' THEN 'CASH' 
				WHEN trans.payment_type = 'REFUND' THEN 'REFUND' 
				ELSE trans.custom_payment_name END AS paymentName,
			SUM(trans.amount) AS sale 
			FROM ticket AS t LEFT JOIN transactions AS trans ON (t.id=trans.ticket_id)
			WHERE t.closing_date BETWEEN #{startDate} AND #{endDate} AND t.voided='false' 
			<if test="paymentName != null"> AND (trans.custom_payment_name=#{paymentName} OR trans.payment_type=#{paymentName})</if>
			GROUP BY factdate, paymentName
      		ORDER BY factdate ASC, paymentName
	</select>
	<select id="getDaily_Sales_Payment_summary" parameterType="HashMap" resultType="com.floreantpos.model.mybatis.PaymentReportM">
		SELECT count(t.id) AS qty_subtotal,
			CASE WHEN trans.payment_type = 'CASH' THEN 'CASH'
				WHEN trans.payment_type = 'REFUND' THEN 'REFUND'  
				ELSE trans.custom_payment_name END AS paymentName,
			SUM(trans.amount) AS sale 
			FROM ticket AS t LEFT JOIN transactions AS trans ON (t.id=trans.ticket_id)
			WHERE t.closing_date BETWEEN #{startDate} AND #{endDate} AND t.voided='false' 
			<if test="paymentName != null"> AND (trans.custom_payment_name=#{paymentName} OR trans.payment_type=#{paymentName})</if>
			GROUP BY paymentName
      		ORDER BY paymentName
	</select>
	<select id="getLuckyDaily_Sales" parameterType="HashMap" resultType="com.floreantpos.model.mybatis.LuckyDailySalesReportM">
		SELECT date(t.closing_date) AS factdate, 
		SUM(t.number_of_guests) AS customer_subtotal, SUM(t.sub_total) AS item_subtotal, SUM(t.item_qty) AS qty_subtotal,
		SUM(t.due_amount) AS due_subtotal, SUM(t.total_tax) AS tax_subtotal, SUM(t.total_discount) AS discount_subtotal,
		SUM(t.service_charge) AS service_charge_subtotal, SUM(t.paid_amount) AS payment_subtotal, SUM(t.total_price) AS sale
		FROM ticket AS t
	    WHERE t.closing_date BETWEEN #{startDate} AND #{endDate} AND t.voided='false'
	    <if test="NeedPaid != null"> AND t.paid=#{NeedPaid} </if>
	    GROUP BY factdate
      	ORDER BY factdate ASC
	</select>
	<select id="getLucky_Sales" parameterType="HashMap" resultType="com.floreantpos.model.mybatis.LuckyDailySalesReportM">
		SELECT date(t.closing_date) AS factdate,
		SUM(CASE WHEN ti.item_translated_name='beverage' THEN ti.total_price ELSE 0 END) AS beverage_subtotal,
		SUM(CASE WHEN ti.item_translated_name='food' THEN ti.total_price ELSE 0 END) AS food_subtotal,
		SUM(CASE WHEN ti.item_translated_name='extra' THEN ti.total_price ELSE 0 END) AS extra_subtotal,
		SUM(CASE WHEN ti.item_translated_name='other' THEN ti.total_price ELSE 0 END) AS other_subtotal 
		FROM ticket AS t, ticket_item AS ti
	    WHERE t.closing_date BETWEEN #{startDate} AND #{endDate} AND t.id=ti.ticket_id AND t.voided='false'
	    <if test="NeedPaid != null"> AND t.paid=#{NeedPaid}</if>
	    GROUP BY factdate ORDER BY factdate
	</select>
	
	<select id="getFoodBeverage_Sales" parameterType="HashMap" resultType="com.floreantpos.model.mybatis.DailySalesReportM">
		SELECT date(t.closing_date) AS factdate,
		SUM(CASE WHEN ti.beverage='true' THEN ti.total_price ELSE 0 END) AS beverage_subtotal,
		SUM(CASE WHEN ti.beverage='false' THEN ti.total_price ELSE 0 END) AS food_subtotal 
		FROM ticket AS t, ticket_item AS ti
	    WHERE t.closing_date BETWEEN #{startDate} AND #{endDate} AND t.id=ti.ticket_id AND t.voided='false'
	    <if test="NeedPaid != null"> AND t.paid=#{NeedPaid} </if>
	    GROUP BY factdate ORDER BY factdate
	</select>
	
	<select id="getSales" parameterType="HashMap" resultType="com.floreantpos.model.mybatis.DailySalesReportM">
		SELECT 
		SUM(t.number_of_guests) AS customer_subtotal, SUM(t.sub_total) AS item_subtotal, 
		SUM(t.due_amount) AS due_subtotal, SUM(t.total_tax) AS tax_subtotal, SUM(t.total_discount) AS discount_subtotal,
		SUM(t.service_charge) AS service_charge_subtotal, SUM(t.paid_amount) AS payment_subtotal, SUM(t.total_price) AS sale
		FROM ticket AS t
	    WHERE t.closing_date BETWEEN #{startDate} AND #{endDate} AND t.paid='true' AND t.voided='false'
	</select>
	
	<!--  <select id="getProduct_Sales" parameterType="Map" resultType="com.floreantpos.model.mybatis.ProductSalesM">
        SELECT ti.item_id productNo, ti.item_name productName, ti.category_name categoryName, ti.beverage beverage, ti.item_price itemPrice, sum(ti.discount) discount,
        sum(ti.sub_total) subtotal, sum(ti.tax_amount) taxAmount, sum(ti.service_charge_amount) scAmount, sum(ti.total_price) totalSale, sum(ti.item_quantity) totalFractionQty, sum(ti.item_count) totalQty
        FROM ticket AS t, ticket_item AS ti
	    WHERE t.closing_date BETWEEN #{startDate} AND #{endDate} AND ti.item_count&gt;0 AND t.paid='true' AND t.voided='false' AND t.id=ti.ticket_id
	    <if test="categoryName != null "> AND ti.category_name=#{categoryName} </if>
        GROUP By productNo, productName, categoryName, beverage, itemPrice
        ORDER by categoryName, productNo
    </select>-->
    <select id="getProduct_Sales" parameterType="Map" resultType="com.floreantpos.model.mybatis.ProductSalesM">
        SELECT ti.item_id productNo, ti.item_name productName, ti.category_name categoryName, ti.beverage beverage, ABS(ti.item_price) itemPrice, sum(ti.discount) discount,
        sum(ti.sub_total) subtotal, sum(ti.tax_amount) taxAmount, sum(ti.service_charge_amount) scAmount, sum(ti.total_price) totalSale, sum(ti.item_quantity) totalFractionQty, sum(ti.item_count) totalQty
        FROM ticket AS t, ticket_item AS ti
	    WHERE t.closing_date BETWEEN #{startDate} AND #{endDate}  AND t.voided='false' AND t.id=ti.ticket_id
	    <if test="ticketId != null"> AND ti.ticket_id=#{ticketId} </if>
	    <if test="NeedPaid != null"> AND t.paid=#{NeedPaid} </if>
	    <if test="categoryName != null "> AND ti.category_name=#{categoryName} </if>
	    GROUP By productNo, productName, categoryName, beverage, itemPrice
	    <choose>
	        <when test=" orderBySales != null "> ORDER BY totalSale DESC, categoryName, productNo </when>
	        <when test=" orderByQty != null "> ORDER BY totalQty DESC, categoryName, productNo </when>
	        <when test=" orderByCategory != null "> ORDER BY categoryName, productNo </when>
	        <otherwise> ORDER BY categoryName, productNo 
	        </otherwise>
        </choose>
        <if test="display!=null"> LIMIT #{display} </if>
    </select>
    
    <select id="getProduct_Return" parameterType="Map" resultType="com.floreantpos.model.mybatis.ProductSalesM">
        SELECT t.id AS ticketId, ti.item_id productNo, ti.item_name productName, ti.category_name categoryName, ti.beverage beverage, ABS(ti.item_price) itemPrice, sum(ti.discount) discount,
        sum(ti.sub_total) subtotal, sum(ti.tax_amount) taxAmount, sum(ti.service_charge_amount) scAmount, sum(ti.total_price) totalSale, sum(ti.item_quantity) totalFractionQty, sum(ti.item_count) totalQty
        FROM ticket AS t, ticket_item AS ti
	    WHERE t.closing_date BETWEEN #{startDate} AND #{endDate}  AND t.paid='true' AND t.voided='false' AND ti.is_return='true' AND ti.return_item_id!=0 AND t.id=ti.ticket_id
	    <if test="categoryName != null "> AND ti.category_name=#{categoryName} </if>
        GROUP By ticketId, productNo, productName, categoryName, beverage, itemPrice
        ORDER by categoryName, productNo
    </select>
    
    <select id="getModifier_Sales" parameterType="Map" resultType="com.floreantpos.model.mybatis.ProductSalesM">
    	SELECT tim.modifier_name AS productName, sum(tim.item_count) AS totalQty, sum(tim.subtotal_price) AS subtotal, sum(tim.tax_amount) AS taxAmount, sum(tim.modifier_service_charge) AS scAmount, 
    		SUM(tim.total_price) AS totalSale FROM ticket t INNER JOIN ticket_item ti ON (t.id=ti.ticket_id AND t.create_date BETWEEN #{startDate} AND #{endDate}  AND t.paid='true' ) INNER JOIN ticket_item_modifier tim ON ti.id=tim.ticket_item_id GROUP BY tim.modifier_name
    </select>
    
    <select id="getOrder_Status" parameterType="Map" resultType="com.floreantpos.model.mybatis.OrderStatusReportM">
    	SELECT t.id, t.create_date::timestamp(0) AS factdate, t.number_of_guests, t.sub_total, t.total_discount, t.total_tax, t.total_price, t.item_qty, t.item_count,
    	t.paid_amount, t.due_amount, t.service_charge, t.ticket_type, t.shift_id, t.terminal_id, t.owner_name, t.voided, t.paid, t.settled, t.void_by_user_name,
    	(CASE WHEN voided = 'true' THEN 'VOIDED' 
    		WHEN paid = 'true' THEN 'FINISH'
    		WHEN settled = 'false' THEN 'QUEUE'
    		WHEN settled = 'true' AND paid = 'false' THEN 'STORE' 
    		END) AS status
		FROM ticket AS t
	    WHERE t.create_date BETWEEN #{startDate} AND #{endDate}
	    <if test="paid != null "> AND t.paid='true' AND t.voided='false' </if>
	    <if test="voided != null"> AND t.voided='true' </if>
	    <if test="queue != null "> AND t.paid='false' AND settled='false' AND t.voided='false' </if>
	    <if test="store != null "> AND t.paid='false' AND settled='true' AND t.voided='false' </if>
	    ORDER BY factdate ASC, id
    </select>
     
    <select id="getOrder_Detail" parameterType="Map" resultType="com.floreantpos.model.mybatis.OrderDetailReportM">
    	SELECT t.id, t.create_date::timestamp(0) AS factdate, t.number_of_guests, t.sub_total, t.total_discount, t.total_tax, t.total_price, t.item_qty, t.item_count,
    	t.paid_amount, t.due_amount, t.service_charge, t.ticket_type, t.shift_id, t.terminal_id, t.owner_name, t.voided, t.paid, t.settled, t.void_by_user_name,
    	(CASE WHEN voided = 'true' THEN 'VOIDED' 
    		WHEN paid = 'true' THEN 'FINISH'
    		WHEN settled = 'false' THEN 'QUEUE'
    		WHEN settled = 'true' AND paid = 'false' THEN 'STORE' 
    		END) AS status
		FROM ticket AS t
	    WHERE t.create_date BETWEEN #{startDate} AND #{endDate}
	    <if test="paid != null "> AND t.paid='true' AND t.voided='false' </if>
	    <if test="voided != null"> AND t.voided='true' </if>
	    <if test="queue != null "> AND t.paid='false' AND settled='false' AND t.voided='false' </if>
	    <if test="store != null "> AND t.paid='false' AND settled='true' AND t.voided='false' </if>
	    ORDER BY factdate ASC, id
    </select> 
    
    <select id="getMember_Sales" parameterType="Map" resultType="com.floreantpos.model.mybatis.MemberSalesReportM">
    	SELECT t.id, t.create_date::timestamp(0) AS factdate, t.closing_date::timestamp(0) AS closedate, t.number_of_guests, t.sub_total, t.total_discount, t.total_tax, t.total_price, t.item_qty,
    	t.item_count, t.paid_amount, t.due_amount, t.service_charge, t.ticket_type, t.shift_id, t.terminal_id, t.owner_name, t.voided, t.paid, t.settled, t.void_by_user_name,
    	c.name AS member_name, c.mobile_no AS member_mobile, 
    	(CASE WHEN voided = 'true' THEN 'VOIDED' 
    		WHEN paid = 'true' THEN 'FINISH'
    		WHEN settled = 'false' THEN 'QUEUE'
    		WHEN settled = 'true' AND paid = 'false' THEN 'STORE' 
    		END) AS status
		FROM ticket AS t, customer AS c
	    WHERE t.create_date BETWEEN #{startDate} AND #{endDate} AND t.customer_id=c.auto_id 
	    <if test="paid != null "> AND t.paid='true' AND t.voided='false' </if>
	    <if test="voided != null"> AND t.voided='true' </if>
	    <if test="queue != null "> AND t.paid='false' AND settled='false' AND t.voided='false' </if>
	    <if test="store != null "> AND t.paid='false' AND settled='true' AND t.voided='false' </if>
	    <if test="MemberName != null"> 
	    	<bind name="pattern" value="'%' + MemberName + '%'" />AND (c.name LIKE #{pattern} OR c.mobile_no LIKE #{pattern}) 
	    </if>
	    ORDER BY factdate ASC, closedate ASC, member_name
    </select> 
    <select id="getMember_Sales_Group_Name" parameterType="Map" resultType="com.floreantpos.model.mybatis.MemberSalesReportM">
    	SELECT SUM(t.number_of_guests) AS number_of_guests, SUM(t.sub_total) AS sub_total, SUM(t.total_discount) AS total_discount, 
    	SUM(t.total_tax) AS total_tax, SUM(t.total_price) AS total_price, SUM(t.item_qty) AS item_qty, SUM(t.item_count) AS item_count,
    	SUM(t.paid_amount) AS paid_amount, SUM(t.due_amount) AS due_amount, SUM(t.service_charge) AS service_charge, 
    	c.name AS member_name
    	FROM ticket AS t, customer AS c
	    WHERE t.create_date BETWEEN #{startDate} AND #{endDate} AND t.customer_id=c.auto_id 
	    <if test="MemberName != null"> 
	    	<bind name="pattern" value="'%' + MemberName + '%'" />AND (c.name LIKE #{pattern} OR c.mobile_no LIKE #{pattern}) 
	    </if>
	    GROUP BY name
	    ORDER BY name
    </select>
    <select id="getMember_Sales_Group_Mobile" parameterType="Map" resultType="com.floreantpos.model.mybatis.MemberSalesReportM">
    	SELECT SUM(t.number_of_guests) AS number_of_guests, SUM(t.sub_total) AS sub_total, SUM(t.total_discount) AS total_discount, 
    	SUM(t.total_tax) AS total_tax, SUM(t.total_price) AS total_price, SUM(t.item_qty) AS item_qty, SUM(t.item_count) AS item_count,
    	SUM(t.paid_amount) AS paid_amount, SUM(t.due_amount) AS due_amount, SUM(t.service_charge) AS service_charge, 
    	c.mobile_no AS member_mobile
    	FROM ticket AS t, customer AS c
	    WHERE t.create_date BETWEEN #{startDate} AND #{endDate} AND t.customer_id=c.auto_id 
	    <if test="MemberName != null"> 
	    	<bind name="pattern" value="'%' + MemberName + '%'" />AND (c.name LIKE #{pattern} OR c.mobile_no LIKE #{pattern}) 
	    </if>
	    GROUP BY mobile_no
	    ORDER BY mobile_no
    </select>
    <select id="getProduct_Sales_Member_Group" parameterType="Map" resultType="com.floreantpos.model.mybatis.ProductSalesM">
        SELECT ti.item_id productNo, ti.item_name productName, ti.category_name categoryName, ti.beverage beverage, ABS(ti.item_price) itemPrice, sum(ti.discount) discount,
        SUM(ti.sub_total) subtotal, sum(ti.tax_amount) taxAmount, sum(ti.service_charge_amount) scAmount, sum(ti.total_price) totalSale, sum(ti.item_quantity) totalFractionQty, sum(ti.item_count) totalQty
        FROM ticket_item AS ti WHERE ti.ticket_id  IN (
        	SELECT t.id as ticket_id FROM ticket AS t, customer AS c
				WHERE t.customer_id=c.auto_id 
				<if test="MemberName != null"> 
	    			<bind name="pattern" value="'%' + MemberName + '%'" /> AND (c.name LIKE #{pattern} OR c.mobile_no LIKE #{pattern}) 
	    		</if>
	    		<if test="cname != null "> AND c.name = #{cname} </if>
			    <if test="mobileNo != null "> AND c.mobile_no = #{mobileNo} </if>
				GROUP BY t.id
        )
        <if test="categoryName != null "> AND ti.category_name=#{categoryName} </if>
	    GROUP By productNo, productName, categoryName, beverage, itemPrice
	    ORDER BY categoryName, productNo
	    
    </select>
     
    
    <select id="getCategory_List" parameterType="Map" resultType="java.lang.String">
    	SELECT name FROM menu_category WHERE visible='true' ORDER BY sort_order, id
    </select>

    <select id="getProduct_Stock" parameterType="Map" resultType="com.floreantpos.model.mybatis.MenuItemM">
        SELECT mi.id productNo, mi.name productName, c.name categoryName, g.name groupName, c.beverage beverage, mi.sort_order sortOrder, c.sort_order AS categoryId,
        mi.price price, mi.stock_amount stockAmount, mi.buy_price buyPrice, mi.unit_name unitName, mi.translated_name translatedName, mi.barcode productBarcode
        FROM menu_item AS mi LEFT JOIN menu_group AS g ON (mi.group_id=g.id) LEFT JOIN menu_category AS c ON (g.category_id=c.id)
	    WHERE c.visible='true' AND g.visible='true' AND mi.visible='true'
	    <if test="categoryName != null "> AND c.name=#{categoryName} </if>
	    <if test="stockAmount != null "> AND mi.stock_item = 'true' </if>
        ORDER by mi.id
    </select>
    
    <select id="getProduct_Stock_Adjust" parameterType="Map" resultType="com.floreantpos.model.mybatis.MenuItemM">
    	SELECT t.transaction_date transactionDate, t.unit_quantity changeQty, t.unit_price buyPrice, t.remark remark, t.tran_type transactionType,
    	t.old_quantity beforeChange, mi.name productName, mi.id productNo, mi.unit_name unitName,  mi.stock_amount stockAmount,
    	mi.category_name categoryName, mi.group_name groupName, v.name vendorName, w.name AS warehouseName
    	FROM inventory_transaction AS t LEFT JOIN menu_item AS mi ON (t.item_id=mi.id) 
    	LEFT JOIN inventory_vendor AS v ON (t.vendor_id=v.id)
    	LEFT JOIN inventory_warehouse AS w ON (t.to_warehouse_id=w.id)
    	WHERE mi.visible='true' AND t.transaction_date BETWEEN #{startDate} AND #{endDate}
	    <if test="categoryName != null "> AND mi.category_name=#{categoryName} </if>
	    <if test="transactionType != null "> AND t.tran_type=#{transactionType} </if>
	    <if test="stockAmount != null "> AND mi.stock_amount &gt; 0 </if>
	    <if test="warehouseId != null "> AND t.to_warehouse_id=#{warehouseId} </if>
	    <choose>
	        <when test="orderBy == 'Vendor/Warehouse'">
                ORDER BY v.name, w.name, t.transaction_date desc, t.tran_type, mi.category_name, mi.id
            </when>
            <when test="orderBy == 'Time'">
                ORDER BY t.transaction_date desc, t.tran_type, mi.category_name, mi.id
            </when>
            <when test="orderBy == 'Type'">
                ORDER BY t.tran_type, t.transaction_date desc, mi.category_name, mi.id
            </when>
            <when test="orderBy == 'Product'">
                ORDER BY mi.category_name, mi.id, t.transaction_date desc, t.tran_type
            </when>
        </choose>
    </select>
    <select id="getProduct_Stock_Adjust_Group" parameterType="Map" resultType="com.floreantpos.model.mybatis.MenuItemM">
    	SELECT SUM(t.unit_quantity) AS changeQty, t.tran_type transactionType, mi.name productName, 
    	v.name vendorName, w.name AS warehouseName
    	FROM inventory_transaction AS t LEFT JOIN menu_item AS mi ON (t.item_id=mi.id) 
    	LEFT JOIN inventory_vendor AS v ON (t.vendor_id=v.id)
    	LEFT JOIN inventory_warehouse AS w ON (t.to_warehouse_id=w.id)
    	WHERE mi.visible='true' AND t.transaction_date BETWEEN #{startDate} AND #{endDate}
	    <if test="categoryName != null "> AND mi.category_name=#{categoryName} </if>
	    <if test="transactionType != null "> AND t.tran_type=#{transactionType} </if>
	    <if test="stockAmount != null "> AND mi.stock_amount &gt; 0 </if>
	    <if test="warehouseId != null "> AND t.to_warehouse_id=#{warehouseId} </if>
	    GROUP BY t.tran_type, mi.name, v.name, w.name
	    <choose>
            <when test="orderBy == 'Vendor/Warehouse'">
                ORDER BY v.name, w.name, t.tran_type, mi.id
            </when>
            <when test="orderBy == 'Type'">
                ORDER BY t.tran_type, v.name, w.name, mi.id
            </when>
            <when test="orderBy == 'Product'">
                ORDER BY mi.name, t.tran_type, v.name, w.id
            </when>
        </choose> 
    </select>
    
     <select id="get_sale_summary" parameterType="Map" resultType="com.floreantpos.model.mybatis.DailySalesReportM">
    	SELECT transaction_date as transactionDate, item_qty as qty_subtotal, sub_total as item_subtotal,
    	delivery_charge, total_discount as discount_subtotal, total_tax as tax_subtotal,
    	service_charge as service_charge_subtotal, total_price, number_of_guests  as customer_subtotal 
    	FROM sales_summary
    	WHERE transaction_date BETWEEN #{startDate} AND #{endDate}
   	</select>
   	
   	<select id="get_payout_notused" parameterType="Map" resultType="com.floreantpos.model.mybatis.PayoutM">
    	select trans.transaction_time as transactionDate, trans.amount,
		trans.note, recp.name as recp_name, reason.reason from transactions trans 
		left join payout_recepients recp 
		on trans.payout_recepient_id = recp.id
		left join payout_reasons reason 
		on trans.payout_reason_id = reason.id
		where trans.transaction_type='DEBIT' and  transaction_time BETWEEN #{startDate} AND #{endDate}
   	</select>
   	
   	<select id="get_payout" parameterType="Map" resultType="com.floreantpos.model.mybatis.PayoutM">
    	select transaction_time as transactionDate, 
    	(CASE WHEN amount &gt; 0 THEN amount ELSE 0 END ) AS amountOut,
    	(CASE WHEN amount &lt;  0 THEN amount ELSE 0 END ) AS amountIn,
		note, card_arqc as recp_name, card_ext_data AS reason from transactions  
		where transaction_type='DEBIT' and  transaction_time BETWEEN #{startDate} AND #{endDate}
   	</select>
   	
   	<select id="get_payout_summary_d" parameterType="Map" resultType="com.floreantpos.model.mybatis.PayoutM">
    	select date(transaction_time) as transactionDate, 
    	SUM(CASE WHEN amount &gt; 0 THEN amount ELSE 0 END ) AS amountOut,
    	SUM(CASE WHEN amount &lt; 0 THEN amount ELSE 0 END ) AS amountIn
    	from transactions  
			where transaction_type='DEBIT' and  transaction_time BETWEEN #{startDate} AND #{endDate}
			group by transactionDate
   	</select>
   	<select id="get_payout_summary_s" parameterType="Map" resultType="com.floreantpos.model.mybatis.PayoutM">
    	select card_ext_data as reason, 
    	SUM(CASE WHEN amount &gt; 0 THEN amount ELSE 0 END ) AS amountOut,
    	SUM(CASE WHEN amount &lt; 0 THEN amount ELSE 0 END ) AS amountIn 
    	from transactions 
			where transaction_type='DEBIT' and  transaction_time BETWEEN #{startDate} AND #{endDate}
			group by card_ext_data
   	</select>
   	<select id="get_payout_summary_c" parameterType="Map" resultType="com.floreantpos.model.mybatis.PayoutM">
    	select card_arqc as recp_name, 
    	SUM(CASE WHEN amount &gt; 0 THEN amount ELSE 0 END ) AS amountOut,
    	SUM(CASE WHEN amount &lt; 0 THEN amount ELSE 0 END ) AS amountIn 
    	from transactions 
			where transaction_type='DEBIT' and  transaction_time BETWEEN #{startDate} AND #{endDate}
			group by card_arqc
   	</select>
   	<select id="get_payout_summary_dsc" parameterType="Map" resultType="com.floreantpos.model.mybatis.PayoutM">
    	select date(transaction_time) as transactionDate, 
    	SUM(CASE WHEN amount &gt; 0 THEN amount ELSE 0 END ) AS amountOut,
    	SUM(CASE WHEN amount &lt; 0 THEN amount ELSE 0 END ) AS amountIn,
			card_arqc as recp_name, card_ext_data AS reason from transactions  
			where transaction_type='DEBIT' and  transaction_time BETWEEN #{startDate} AND #{endDate}
			group by transactionDate, reason, recp_name
   	</select>
   	<select id="get_payout_summary_ds" parameterType="Map" resultType="com.floreantpos.model.mybatis.PayoutM">
    	select date(transaction_time) as transactionDate, 
    	SUM(CASE WHEN amount &gt; 0 THEN amount ELSE 0 END ) AS amountOut,
    	SUM(CASE WHEN amount &lt; 0 THEN amount ELSE 0 END ) AS amountIn,
			card_ext_data AS reason from transactions  
			where transaction_type='DEBIT' and  transaction_time BETWEEN #{startDate} AND #{endDate}
			group by transactionDate, reason
   	</select>
   	<select id="get_payout_summary_dc" parameterType="Map" resultType="com.floreantpos.model.mybatis.PayoutM">
    	select date(transaction_time) as transactionDate, 
		SUM(CASE WHEN amount &gt; 0 THEN amount ELSE 0 END ) AS amountOut,
    	SUM(CASE WHEN amount &lt; 0 THEN amount ELSE 0 END ) AS amountIn,
			card_arqc as recp_name from transactions  
			where transaction_type='DEBIT' and  transaction_time BETWEEN #{startDate} AND #{endDate}
			group by transactionDate, recp_name
   	</select>
   	<select id="get_payout_summary_sc" parameterType="Map" resultType="com.floreantpos.model.mybatis.PayoutM">
    	select SUM(CASE WHEN amount &gt; 0 THEN amount ELSE 0 END ) AS amountOut,
    	SUM(CASE WHEN amount &lt; 0 THEN amount ELSE 0 END ) AS amountIn,
			card_arqc as recp_name, card_ext_data AS reason from transactions  
			where transaction_type='DEBIT' and  transaction_time BETWEEN #{startDate} AND #{endDate}
			group by reason, recp_name
   	</select>
   	
   	<update id="delPayoutRecepient" parameterType="Map">
   		<if test="recepient !=null">
   			update payout_recepients set name=null where name=#{recepient}
   		</if>
   	</update>
   	<update id="delPayoutReason" parameterType="Map">
   		<if test="reason !=null">
   			update payout_reasons set reason=null where reason=#{reason} 
   		</if>
   	</update>
   	
   	
   	<select id="get_profitloss" parameterType="Map" resultType="com.floreantpos.model.mybatis.PayoutM">
   		SELECT date(transaction_time) as transactionDate,
        SUM(CASE WHEN transaction_type =  'CREDIT' THEN amount else 0 END ) as amount,
       	SUM(CASE WHEN transaction_type =  'DEBIT' AND amount &gt; 0 THEN amount ELSE 0 END) as amountOut,
       	SUM(CASE WHEN transaction_type =  'DEBIT' AND amount &lt; 0 THEN amount ELSE 0 END) as amountIn
		FROM transactions
		where transaction_time BETWEEN #{startDate} AND #{endDate}
		group by  date(transaction_time)
		order by date(transaction_time)
    </select>
    
    <select id="get_last_ticket_modify" parameterType="Map" resultType="java.lang.Long">
    	SELECT extract(epoch FROM MAX(active_date::timestamp(0))) FROM ticket
    </select>
    
    <select id="get_yesterday_max_id" parameterType="Map" resultType="java.lang.Long">
    	SELECT MAX(id) FROM ticket WHERE closing_date::date=current_date-1
    </select>
    
   
    <select id="get_pg_path" parameterType="Map" resultType="java.lang.String">
        SELECT current_setting('config_file') AS location
    </select>
    
</mapper>